# 법원 경매 웹사이트 구축 지침서

## 1. 개요 및 목표 설정
- **목적**: 법원 경매 차량 정보를 일반인들에게 쉽게 제공하는 웹사이트 구축
- **주요 기능**:
  - 법원 경매 차량 정보 제공
  - 차량 검색 및 필터링 기능
  - 실시간 데이터 크롤링 및 업데이트
  - 사용자 친화적인 UI/UX
  
## 2. 답변 및 코드 제공 원칙
### 질문 응답 방식
- 사용자의 질문에는 **1개씩 대답**한다.
  - 예: "이게 안되는데 어떻게 해야 돼?" 라고 질문하면 **1번 해결 방법**을 제시한다.
  - 만약 해결되지 않으면 **2번 해결 방법**을 제시한다.
  - 그래도 안될 경우 **3번 해결 방법**을 제시하는 식으로 진행한다.

### 코드 제공 원칙
- 사용자가 **코드를 요청했을 때만 제공**한다.
- 제공된 코드는 기존 코드에서 **수정 및 추가할 부분을 명확하게 표시**한다.
  - `++++++++++`을 사용하여 **수정/추가/삭제 부분을 명확하게 구분**한다.
  - 예제:
    ```python
    기존 코드
    ++++++++++
    추가 또는 수정된 코드
    ++++++++++
    기존 코드 계속
    ```

## 3. 기술 스택 선택
### 프론트엔드
- **HTML, CSS, JavaScript (React.js)**: 직관적인 UI 개발
- **Tailwind CSS**: 스타일링 최적화

### 백엔드
- **Python (Flask/Django)** 또는 **Node.js (Express.js)**
- **API 서버 구축 및 데이터 제공**

### 데이터베이스
- **MySQL**: 차량 경매 데이터 저장 및 관리

## 4. 법원 경매 데이터 수집 (크롤링)
- **대상 사이트**: [법원 경매 정보](https://www.courtauction.go.kr/pgj/index.on)
- **크롤링 방법**:
  - `Selenium`을 이용하여 웹페이지 데이터 수집
  - `BeautifulSoup`을 활용한 HTML 데이터 파싱
  - 크롤링 데이터 자동 저장 (MySQL, 구글 스프레드시트 연동)

## 5. 데이터베이스 설계
- **저장 필드**:
  - 차량명, 연식, 주행거리, 최저매각가격, 연료, 매각기일, 사건번호+물건번호, **등록번호, 담당**
- **테이블 구조 예시**:
  ```sql
  CREATE TABLE auction_cars (
      id INT AUTO_INCREMENT PRIMARY KEY,
      car_name VARCHAR(255),
      year INT,
      mileage INT,
      min_price INT,
      fuel_type VARCHAR(50),
      sale_date DATE,
      case_number VARCHAR(50),
      registration_number VARCHAR(50),
      officer VARCHAR(255)
  );
  ```

## 6. 웹사이트 개발 단계
1. **기본 UI/UX 설계**
2. **프론트엔드 개발** (React.js 기반)
3. **백엔드 API 구축** (Flask/Django)
4. **데이터베이스 연동 및 크롤링 데이터 적용**
5. **검색 및 필터링 기능 구현**

## 7. 자동화 및 배포
- **크롤링 자동화**: Google Cloud VM에서 Selenium 실행
- **서버 배포**:
  - AWS (EC2, RDS, S3) 또는 Google Cloud
  - CI/CD 설정 (GitHub Actions)

## 8. 유지보수 및 확장
- **데이터 정기 업데이트** (최대 500개 유지)
- **사용자 피드백 반영하여 기능 추가**

